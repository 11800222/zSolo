<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            ">

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.0.180:5433/mpbm"></property>
		<!-- <property name="url" value="jdbc:mysql://127.0.0.1:3306/mpbm"></property> -->
		<property name="username" value="mpbmd"></property>
		<property name="password" value="mpbmd123"></property>

	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:mybatis/mappers/*.xml" />
	</bean>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="TdSystemLogMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="mybatis.mappers.TdSystemLogMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="Transactional_Method" class="mybatis.SqlSession.Transactional_Method">
	</bean>
	<bean id="Another_Transactional_Method" class="mybatis.SqlSession.Another_Transactional_Method">
	</bean>

	<!-- Ioc测试Bean -->
	<bean id="RaWAopBean1" class="spring.Aop" lazy-init="true">
	      <property name="AopAopProperty" ref="RaWAopBean2" />
	</bean>
	
	<bean id="RaWAopBean2" class="spring.Aop" lazy-init="true">
	      <property name="AopAopProperty" ref="RaWAopBean1" /> 
	</bean>
 
	<bean id="RawBean1" class="spring.IoC" lazy-init="true">   <!-- 不是真的RawBean，因为这里所有IoC类bean都被AOP代理 -->
	  <!-- <property name="aop" ref="RawBean2" /> -->
	</bean>

	<bean id="RawBean2" class="spring.Aop" lazy-init="true">
	    <property name="AopAopInterface" ref="RawBean1" />
	</bean>

	<!-- 构造器注入,循环依赖 -->
	<!-- <bean id="TestBean5" class="spring.IoC" > <constructor-arg index="0" ref="TestBean6" /> </bean> -->

	<!-- <bean id="TestBean6" class="spring.IoC" > <constructor-arg index="0" ref="TestBean5" /> </bean> -->

	<!-- prototype的setter注入，循环依赖 -->
	<bean id="prototypeBean1" class="spring.IoC" lazy-init="true" scope="prototype">
		<property name="ioC" ref="prototypeBean2" />
	</bean>

	<bean id="prototypeBean2" class="spring.IoC" lazy-init="true" scope="prototype">
		<property name="ioC" ref="prototypeBean1" />
	</bean>

	<bean id="AopBean" class="spring.IoC" lazy-init="true">
		<!-- AOP会将RawBean1代理，注入Ioc类型会报错，注入接口类型AopInterface才不会出错 -->
		<!-- <property name="ioc" ref="RawBean1" /> -->
		<property name="aopInterface" ref="RawBean1" />
	</bean>


	<aop:config proxy-target-class="true"> 	<!-- false 使用jdk代理 -->
		<!-- 定义切点函数 -->
		<aop:pointcut id="pointcut" expression="execution(* spring.IoC.sayhello(..))" />

		<!-- 定义通知 -->
		<aop:aspect ref="RawBean2" order="0">

			<aop:before method="Advice" pointcut-ref="pointcut" /><!-- 前置通知 -->

		</aop:aspect>
	</aop:config>
</beans>
	
	
	
	
	
	
	
	
	
	
	